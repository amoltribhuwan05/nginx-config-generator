import type { ConfigType } from "./types"

export function generateNginxConfig(config: ConfigType): string {
  const nginxConfig = `# Generated by Nginx Config Generator
# ${new Date().toISOString()}

user nginx;
worker_processes ${config.workerProcesses};
pid /var/run/nginx.pid;

events {
    worker_connections ${config.workerConnections};
    # multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout ${config.keepaliveTimeout};
    types_hash_max_size 2048;
    client_max_body_size ${config.clientMaxBodySize};
    server_tokens ${config.serverTokens};

    # MIME Types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log ${config.accessLog} ${config.logFormat};
    error_log ${config.errorLog};

    # Gzip Settings
${
  config.gzipEnabled
    ? `    gzip on;
    gzip_comp_level ${config.gzipCompLevel};
    gzip_min_length ${config.gzipMinLength};
    gzip_types ${config.gzipTypes};
    gzip_vary on;
    gzip_proxied any;
    gzip_disable "msie6";`
    : "    gzip off;"
}

${
  config.cachingEnabled
    ? `    # Cache Settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=${config.cacheZoneName}:${config.cacheZoneSize} inactive=${config.cacheValidTime};`
    : ""
}

${
  config.rateLimitEnabled
    ? `    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=${config.rateLimitZone}:${config.rateLimitMemory} rate=${config.rateLimitRate};`
    : ""
}

    # Custom HTTP Directives
${
  config.httpDirectives
    ? config.httpDirectives
        .split("\n")
        .map((line) => `    ${line}`)
        .join("\n")
    : ""
}

    server {
        listen ${config.port};
${
  config.sslEnabled
    ? `        listen ${config.sslPort} ssl;
        ssl_certificate ${config.sslCertificate};
        ssl_certificate_key ${config.sslCertificateKey};
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;`
    : ""
}
        
        server_name ${config.serverName};

        # Security Headers
        add_header X-Frame-Options "${config.xFrameOptions}";
        add_header X-Content-Type-Options "${config.xContentTypeOptions}";
        add_header X-XSS-Protection "${config.xXSSProtection}";

${
  config.rateLimitEnabled
    ? `        # Rate Limiting
        limit_req zone=${config.rateLimitZone} burst=5 nodelay;`
    : ""
}

        # Custom Server Directives
${
  config.serverDirectives
    ? config.serverDirectives
        .split("\n")
        .map((line) => `        ${line}`)
        .join("\n")
    : ""
}

${config.locations
  .map(
    (loc) => `        location ${loc.path} {
${loc.root ? `            root ${loc.root};` : ""}
${loc.index ? `            index ${loc.index};` : ""}
${loc.tryFiles ? `            try_files ${loc.tryFiles};` : ""}
${
  config.proxyEnabled && loc.path === "/"
    ? `            proxy_pass ${config.proxyPass};
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
${config.proxySetHeader.map((header) => `            proxy_set_header ${header};`).join("\n")}
            proxy_cache_bypass $http_upgrade;`
    : ""
}
${
  config.cachingEnabled && loc.path === "/"
    ? `            proxy_cache ${config.cacheZoneName};
            proxy_cache_valid 200 ${config.cacheValidTime};
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;`
    : ""
}
        }
`,
  )
  .join("\n")}
    }
}
`
  return nginxConfig
}

